# PepperAI - Bell Pepper Detection & Quality Assessment System
# Docker Compose configuration for production deployment

services:
  # Main PepperAI Application
  pepperai:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: pepperai-app
    env_file:
      - .env
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE:-1}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///instance/pepperai.db}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-uploads}
      - RESULTS_FOLDER=${RESULTS_FOLDER:-results}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    volumes:
      - pepperai_uploads:/app/uploads
      - pepperai_results:/app/results
      - pepperai_instance:/app/instance
    networks:
      - pepperai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pepperai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - pepperai_uploads:/var/www/uploads:ro
      - pepperai_results:/var/www/results:ro
    networks:
      - pepperai-network
    restart: unless-stopped
    depends_on:
      - pepperai
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: pepperai-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - pepperai_redis:/data
    networks:
      - pepperai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database backup service
  backup:
    image: alpine:latest
    container_name: pepperai-backup
    volumes:
      - pepperai_instance:/backup/instance:ro
      - ./backups:/backups
    command: |
      sh -c "
        while true; do
          timestamp=$$(date +%Y%m%d_%H%M%S)
          cp /backup/instance/pepperai.db /backups/pepperai_backup_$$timestamp.db
          find /backups -name 'pepperai_backup_*.db' -mtime +7 -delete
          sleep 86400
        done
      "
    networks:
      - pepperai-network
    restart: unless-stopped

volumes:
  pepperai_uploads:
    driver: local
  pepperai_results:
    driver: local
  pepperai_instance:
    driver: local
  pepperai_redis:
    driver: local

networks:
  pepperai-network:
    driver: bridge
